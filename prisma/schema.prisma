generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  workspaces    WorkspaceMember[]
  usage         Usage[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  members     WorkspaceMember[]
  projects    Project[]
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(EDITOR)
  joinedAt    DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model Project {
  id           String            @id @default(cuid())
  name         String
  description  String?
  prompt       String
  sandboxId    String?           @unique
  previewUrl   String?
  status       ProjectStatus     @default(CREATING)
  visibility   ProjectVisibility @default(PRIVATE)
  userId       String
  workspaceId  String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace    Workspace?        @relation(fields: [workspaceId], references: [id])
}

model Usage {
  id        String    @id @default(cuid())
  userId    String
  type      UsageType
  amount    Int       @default(1)
  details   String?   // JSON string for additional data
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum WorkspaceRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum ProjectStatus {
  CREATING
  ACTIVE
  STOPPED
  ERROR
}

enum ProjectVisibility {
  PRIVATE
  WORKSPACE
  PUBLIC
}

enum UsageType {
  PROJECT_CREATION
  CHAT_MESSAGE
  PREVIEW_GENERATION
  DEPLOYMENT
}